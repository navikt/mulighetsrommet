name: Deploy (dev)

on:
  push:
    branches:
      - feature/tc-273-adjust-kafka-for-arena
env:
  IMAGE_TAG: ${{ github.sha }}
  IMAGE: ghcr.io/navikt/mulighetsrommet
  IMAGE_LABEL: dev
  REACT_APP_BACKEND_API_ROOT: https://mulighetsrommet-api.dev.intern.nav.no
  CI: true
  TZ: Europe/Amsterdam

jobs:
  change-check:
    name: Check changes
    runs-on: ubuntu-latest
    outputs:
      changed-be: ${{ steps.changed-be.outputs.changed }}
      changed-fe: ${{ steps.changed-fe.outputs.changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 100
      - name: Backend
        uses: marceloprado/has-changed-path@v1
        id: changed-be
        with:
          paths: backend
      - name: Frontend
        uses: marceloprado/has-changed-path@v1
        id: changed-fe
        with:
          paths: frontend
  build-docker-image-be:
    name: Build Docker image (backend)
    runs-on: ubuntu-latest
    needs: change-check
    if: needs.change-check.outputs.changed-be == 'true'
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 11
          cache: gradle
      - name: Build with Gradle
        # Disable test until we can mock out the koin components initialized at start
        # run: ./gradlew test build --info
        run: ./gradlew build -x test --info
      - name: Build and push Docker image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo ${GITHUB_TOKEN} | docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} --password-stdin
          echo ${GITHUB_TOKEN} | docker login ghcr.io -u ${{github.actor}} --password-stdin
          docker build -t ${IMAGE}/mulighetsrommet-api-${IMAGE_LABEL}:${IMAGE_TAG} .
          docker push ${IMAGE}/mulighetsrommet-api-${IMAGE_LABEL}:${IMAGE_TAG}

  deploy-be:
    name: Deploy Docker image (backend)
    runs-on: ubuntu-latest
    needs: build-docker-image-be
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Deploy
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: backend/.nais/nais.yaml
          VAR: image_tag=${{env.IMAGE_TAG}},image_label=${{env.IMAGE_LABEL}}
      - name: Create release tag
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release/dev@${{ env.IMAGE_TAG }}
          release_name: Release to dev
          prerelease: true
  build-docker-image-fe:
    name: Build Docker image (frontend)
    runs-on: ubuntu-latest
    needs: change-check
    if: needs.change-check.outputs.changed-fe == 'true'
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: 16
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install and build
        run: |
          npm ci
          npm run build
      - name: Build and publish Docker image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo ${GITHUB_TOKEN} | docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} --password-stdin
          echo ${GITHUB_TOKEN} | docker login ghcr.io -u ${{github.actor}} --password-stdin
          docker build -t ${IMAGE}/mulighetsrommet-flate-${IMAGE_LABEL}:${IMAGE_TAG} -f .docker/dev/Dockerfile .
          docker push ${IMAGE}/mulighetsrommet-flate-${IMAGE_LABEL}:${IMAGE_TAG}

  deploy-fe:
    name: Deploy Docker image (frontend)
    runs-on: ubuntu-latest
    needs: build-docker-image-fe
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: frontend/.nais/nais.yaml
          VARS: frontend/.nais/dev-gcp.yaml
          VAR: image_tag=${{env.IMAGE_TAG}},image_label=${{env.IMAGE_LABEL}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
