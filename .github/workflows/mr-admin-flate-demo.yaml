name: CI/CD (mr-admin-flate-demo)

on:
  push:
    paths:
      - .github/workflows/mr-admin-flate-demo.yaml
      - package.json
      - package-lock.json
      - turbo.json
      - frontend/mr-admin-flate/**
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE: ghcr.io/navikt/mulighetsrommet/mr-admin-flate-mock:${{ github.sha }}
  CI: true
  TZ: Europe/Amsterdam

jobs:
  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup frontend
        uses: ./.github/actions/setup-frontend
      - name: Test
        run: npx turbo run lint test:ci --filter=mr-admin-flate
      - name: Build
        run: npx turbo run build:demo --filter=mr-admin-flate
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          working-directory: frontend/mr-admin-flate
          browser: chrome
          headed: true
          wait-on: http://localhost:5173
          start: npm start
          install: false
      - name: Build and publish Docker image
        if: github.event_name == 'push' && github.ref_name == 'main' || github.event_name == 'workflow_dispatch'
        working-directory: frontend/mr-admin-flate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo ${GITHUB_TOKEN} | docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} --password-stdin
          echo ${GITHUB_TOKEN} | docker login ghcr.io -u ${{github.actor}} --password-stdin
          docker build -t ${IMAGE} .
          docker push ${IMAGE}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [ build-and-test ]
    if: github.event_name == 'push' && github.ref_name == 'main' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: frontend/mr-admin-flate/.nais/nais-demo.yaml
          VAR: image=${{ env.IMAGE }}
