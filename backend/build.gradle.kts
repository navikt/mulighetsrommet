/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    application
    kotlin("jvm") version "1.6.10"
    id("org.jetbrains.kotlin.plugin.serialization") version "1.5.31"
    id("org.flywaydb.flyway") version "8.0.3"
    /**
     * Linting and auto formatting of project sources
     */
    id("org.jlleitschuh.gradle.ktlint") version "10.2.0"
}

application {
    mainClass.set("io.ktor.server.netty.EngineMain")
}

configure<org.jlleitschuh.gradle.ktlint.KtlintExtension> {
    disabledRules.addAll("no-wildcard-imports")
}

repositories {
    mavenCentral()
}

dependencies {
    val ktorVersion = "1.6.2"
    val koinVersion = "3.1.5"

    implementation("io.ktor:ktor-metrics-micrometer:$ktorVersion")
    implementation("io.ktor:ktor-serialization:$ktorVersion")
    implementation("io.ktor:ktor-server-core:$ktorVersion")
    implementation("io.ktor:ktor-server-netty:$ktorVersion")
    implementation("io.ktor:ktor-server-sessions:$ktorVersion")
    implementation("io.ktor:ktor-webjars:$ktorVersion")
    implementation("io.micrometer:micrometer-registry-prometheus:1.6.3")
    implementation("ch.qos.logback:logback-classic:1.2.3")
    implementation("com.zaxxer:HikariCP:4.0.3")
    implementation("org.jetbrains.exposed:exposed-java-time:0.34.2")
    implementation("org.jetbrains.exposed:exposed-core:0.34.2")
    implementation("org.jetbrains.exposed:exposed-jdbc:0.34.2")
    implementation("org.postgresql:postgresql:42.2.23")
    implementation("org.flywaydb:flyway-core:8.0.3")
    implementation("org.kodein.di:kodein-di-framework-ktor-server-jvm:7.6.0")
    implementation("org.apache.kafka:kafka_2.13:2.8.1")
    implementation("org.apache.kafka:kafka-streams:2.8.1")
    implementation("io.insert-koin:koin-ktor:$koinVersion")
    implementation("io.insert-koin:koin-logger-slf4j:$koinVersion")
    runtimeOnly("org.webjars:swagger-ui:4.1.2")
    testImplementation("io.ktor:ktor-server-tests:$ktorVersion")
    testImplementation("org.jetbrains.kotlin:kotlin-test:1.6.10")
    testImplementation("io.mockk:mockk:1.12.0")
    testImplementation("org.apache.kafka:kafka-streams-test-utils:2.8.1")
}

tasks.withType<Jar> {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes["Main-Class"] = application.mainClass
    }
    from(sourceSets.main.get().output)

    dependsOn(configurations.runtimeClasspath)
    from({
        configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") }.map { zipTree(it) }
    })
}

java.sourceCompatibility = JavaVersion.VERSION_1_8

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}

flyway {
    url = System.getenv("DB_URL")
    user = System.getenv("DB_USERNAME")
    password = System.getenv("DB_PASSWORD")
}
